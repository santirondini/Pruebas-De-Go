------------------------------------------------------
VARIABLES

noTipado := 1234
var tipadoSinValor int 
var tipadoConValor int = 1231

var nombreDeVariable tipo

Tipos Basicos:

var soyUnBooleano bool;
var soyUnMensaje string;
var soyUnEntero int;
var soyUnFlotante float32;
var soyUnByte byte;

fmt.Scanln(&frase) ==> lee una frase hasta el espacio 

fmt.Println("Frase...", variable a mostrar por pantalla)

Floats:

var float32
var float64

Si no le asignamos valor, automaticamente va a ser 0

Byte: represetna un numero entero de 8bits sin signo. Su dato por defecto es 0 

Tipos de Datos Compuestos:
<
-------------

* array => colección de elementos del mismo tipo

Declaración: 
- var arraySinVaor [5]int 
- var arrarConValores [5]int = [5]int{1,2,3,4,5}

Esta en base 0

-------------

* slice => similar al array, pero su tamaño puede ser modificado dinamicamente 

Declaración: 
- var sliceSinValor []int 
- var sliceConValores []int = []int{1,2,3,4,5}

Sacar tamaño:

var tamanioSliceConValor = len(sliceConValores)
fmt.Println("El tamaño del slice es:",tamanioSliceConValor)

Agregar valor:

sliceConValor = append(sliceConValor, 6)

Imprimo el nuevo tamaño del slice con valor:
	
tamañoSliceConValor = len(sliceConValor)
fmt.Println("Nuevo tamaño del slice con valor: ", tamañoSliceConValor)

Imprimo el nuevo Slice:
fmt.Println("Nuevo slice con valor: ", sliceConValor)

Tambien sus indices estan en base 0
Go no posee la función de eliminar un inidce en aprticular de una slice, sino que debe hacerse a traveés de hacer cub slice;
quedarse con una aprte del slice original:

var mySlice []int = []int{1, 2, 3, 4, 5}

Para obtener los primeros dos elementos del array
fmt.Println("Primeros dos elementos:", mySlice[:2])

Para quedarme con todos los elementos posterior al indice 2 (inclusive)
fmt.Println("Ultimos elementos:", mySlice[2:])

Para quitar el elemento de indice 2
fmt.Println("Slice sin el elemento 3:", append(mySlice[:2], mySlice[2+1:]...))

-------------

* map => colección de pares clave-valor. Ejemplo: 
    var miMapa map[string]int ==> se declara un map donde las claves son strings y los valores de tipo int 

Inicialización: 
1) miMapa = make(map[string]int)
2) miMapa := map[string]int {
    "uno": 1,
    "dos": 2,
}

Operaciones basicas:

- miMapa["tres"] = 3
- valor := miMapa["uno"]
- delete(miMapa, "dos") ==> eliminar una clave
- Agregar valor a un map:
mapNombresEdad["Nahuel"] = 32

-------------

* struct: representa un conjunto de campos con diferentes tipos de datos 

Declaración:

type Nombre struct {
    nombreVariable1 tipo1
    nombreVariable2 tipo2
    nombreVariable3 tipo3
    ..
}

var persona Persona = Persona{"Nahuel",32,1.77}
- Acceder a una unica propiedad:
    nombreDelStructCreado.atributo

- Redefinir: 
    nombreDelStructCreado.atributo = valorNuevo

-------------

Transformación cadena <=> byte 

Por diferentes razones, hrbra que transformar una cadena(string) en un array de bytes:
COMO HACERLO:

1) Definimos estos datos:

    var cadena string = "Hola"
	var arrayBytes []byte

2) transformamos la cadena en array de bytes:

	Transformamos nuestra cadena en un array de bytes
	arrayBytes = []byte(cadena)

3) Imprimir el array:

	fmt.Println("Array de bytes:", arrayBytes)

4) Convertimos el array de bytes en una cadena
	
    var nuevaCadena string = string(arrayBytes)

5)  Imprimimos la nueva cadena
	
    fmt.Println("Nueva cadena:", nuevaCadena)

Por Consola: 
        Array de bytes: [72 111 108 97]
        Nueva cadena: Hola

Van a existir simobolos que ocupen mas de un byte. Ej: la cadena "ABC€"
Si la pasamos un array de bytes, queda:
    [65 66 67 226 130 172]  

€ en UTF-8 es representado por 3 bytes.  
Si en algun momento hay que guardas cosas en un []byte hay que saber que no siempre una secuencia de N caracteres
ocuparan N bytes. Se puede usar len().

------------------------------------------------------

FUNCIONES

Palabra reservada func. Deben ser declaradas por medio de una firma en la cual se especifiquen los valores que recibe y/o retorna. Ej:

func sumar(a int, b int) int {
	return a + b
}

-------------

Scopes: la region en al que existe una variable o funcion dentro de nuestro codigo. Donde se puede acceder a ellos. Ej:

func main() {
	var valor1 int = 1
	var valor2 int = 2

	var suma int = sumar(valor1, valor2)

	fmt.Println("Resultado:", suma)
}

func sumar(a int, b int) int {
	return a + b
}

Tanto valor1 como valor2 estan dentro del scope de main. Unicamente pueden usarse ahi. Ahora:

var valor1 int = 3

func main() {
	var valor2 int = 2

	fmt.Println("Resultado sumar2:", sumar2(valor2))
}

func sumar2(b int) int {
	return valor1 + b
}

valor1 es una variable declarada de forma GLOBAL, pudiendo acceder a la func sumar2
El objetivo de esto es cuidar como se nombran las variables en el codigo. Go va a tomar el valor 
de la bariable en el scope en que el estemos trabajando en ese momento. Podemos declarar funciones dentro 
de otras:

func main() {
	var valor1 int = 1
	var valor2 int = 2

	var sumar = func(a int, b int) int {
		return a + a + b
	}

	fmt.Println("Resultado sumar:", sumar(valor1, valor2))
}

func sumar(a int, b int) int {
	return a + b
}

------------------------------------------------------

OPERADORES

Operadores Aritmeticos:

- Incremento: variable++
- Decremento: variable--
- Signo: 
    var i int = 10
    fmt.Println("+i =", +i)
    fmt.Println("-i =", -i)
- Complemento: ^ . Complemento de una variable bit a bit. 
- Negación: ! . Negación de una variable booleana.
- Logicos: <, >, <=, >=, ==, !=
- Condicionales: &&, ||, !
- Asignación: =, +=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>=

------------------------------------------------------

SENTENCIAS

---------

If - Then: 

func main() {
	var edad int = 15
	if edad < 18 {
		fmt.Println("Menor de edad!")
	}
}

---------

If - Then - Else:

func main() {
	var edad int = 19;
	if edad < 18 {
		fmt.Println("Menor de edad!")
	} else {
		fmt.Println("Mayor de edad!")
	}
}

---------

If - Then - Else - If:

func main() {
	var edad int = 76;
	if edad < 18 {
		fmt.Println("Menor de edad!")
	} else if(edad < 75) {
		fmt.Println("Mayor de edad!")
	} else {
		fmt.Println("Jubilado")
	}
}

---------

Switch: 

func main() {
	funcionCase("A")
	funcionCase("D")
	funcionCase("J")
}

func funcionCase(a string) {
	switch a {
	case "A":
		fmt.Println("Abeja")
	case "B":
		fmt.Println("Baskett")
	case "C":
		fmt.Println("Codigo")
	case "D":
		fmt.Println("Dado")
	default:
		fmt.Println("No se que es!")
	}
}

---------

For: 

func main() {
	for i:=0; i < 10; i++ {
		fmt.Print(i, " ")
	}
}

---------

While: 

func main() {
	i := 0
	for i < 10 {
		fmt.Print(i, " ")
		i++
	}
}

------------------------------------------------------

HILOS 

definición: tarea que puede ser ejecutada al mismo tiempo que otra. Comparte recursos del proceso padre que lo ejecuta
y existen herramientas para comunicar distintos hilos entre si.
Los hilos son una forma de paralelizar el trabajo, pero no son la unica.

Cuando nuestro programa tiene que hacer mas de una cosa a la vez => usamos Hilos

Tipos de Hilos:

    1) Hilos de usuario: son aquellos que son creados por el usuario. Se ejecutan en el espacio de usuario y no tienen 
        acceso directo a los recursos del sistema operativo. Este hilo solo existe dentro del un proceso, por lo cual
        no puede hacer referencia a un hilo de otro. El S.O no sabe que existen, solo reconoce hilos en ejecuccion.

    2) Hilos de Kernel: son aquellos que son creados por el sistema operativo. Se ejecutan en el espacio del kernel y 
        tienen acceso directo a los recursos del sistema operativo.

Golang (el maldito Gopher) permite la creación de hilos y les llama "Rutinas". Estas son hilos de usuario. 
Dentro del motor existe un planificador que administra dichas rutinas dentro de hilos de kernel. Los hilos de usuario
corren en hilos de kernel. Caracteristicas:

- Son muy livianos. Se pueden crear millones de rutinas sin problemas.
- Se comunican entre si mediante canales (channels).
- Si una gorutine se bloquea, el planificador puede ejecutar otra gorutine.
 
Ejemplo de video: https://www.youtube.com/watch?v=4FrZjGXSBZo

func Hello(){
    fmt.Println("Hello, world!")
}

func main(){
    go Hello() // Lanza la gorutina
    time.Sleep(1 * time.Second) // Espera 1 segundo para que la gorutina termine
}

Cuando lo corremos por consola, nos imprime Hello, world! despues de un segundo y termina el programa.

----------

Rutinas Golang:

var valor int = 0

func main() {

	for i := 0; i < 20; i++ {
		thread()
	}
}

func thread() {
	valor++
	fmt.Println("Este es el hilo número", valor)
}

Consola: 

Este es el hilo número 1
Este es el hilo número 2
.
.
.
Este es el hilo numero 20

Ejemplo 2: 

var valor int = 0

func main() {

	for i := 0; i < 20; i++ {
		go thread() 
	}

	//Este tiempo es importante debido a que si el hilo
	//principal termina antes, los hilos no se
	//ejecutarán
	time.Sleep(101 * time.Second)
}

func thread() {
	valor++
	fmt.Println("Este es el hilo número", valor)
}

Por consola van a largarse "Este es el hilo numero x" pero no se forma continua como antes.
Agregando el go adelante de la funcio thread() hizo que genera una rutina que atienda la ejecuccion de dicha funcion 

Agreando el go, lanzamos multiples funciones que se ejecutan al mismo tiempo y por eso no hay un orden garantizado. Le decis 
a go: "ejecutá esta función en una goroutine aparte y no te quedes esperando a que termine". Esto genera que las goroutines se ejecuten 
cuando pueden, en paralelo o intercaladas. 

Las rutinas son hilos "hijos" del proceso main y si diche funcion finaliza, las rutinas tambien mueren. Debido a esto,
agregarmos un Sleep para lograr que dicha funcion no finalice antes que lo hagan sus rutinas.

Condiciones de Carrera: debido a que todas las rutinas estan compitiendo para utilizar la variable valor y que son planificadas, 
se generó que los resultados ya no sean deterministicos. Los hilos se planifican primero por el Scheduler de Go y luego por el S.O

Las goroutines son tareas paralelas al resto del codigo del programa, incluyndo al main() (hilo principal) y otras rutinas. 
------------------------------------------------------

SINCRONIZACIÓN 

Coordinar y ordenar dos acciones que pueden ocurrir al mismo tiempo para que solo una lo haga. Dentro de Go existen tres herramientas 
principales para sincronizar rutinas:
    - sync.WaitGroup
    - sync.Mutex
    - Canales: 'chan'

----------

sync.WaitGroup: se utiliza para esperar la finalización de un grupo de rutinas. Permite que una gourutine espere hasta que todas 
las rutinas en el grupo hayan completo su ejecuccion. NO SINCRONIZA RECURSOS.
    - Sintaxis: Metodos como Add(), Done() y Wait(). 
        - Add(): incrementa el contador 
        - Done(): decrementa el contador
        - Wait(): bloquea hasta que el contador llegue a 0

Ejemplo: 

var wg sync.WaitGroup

for i := 0; i < 3; i+ + { => cada iteracion lanza una goroutine
    wg.Add(1) => le dice al WaitGroup que espere una goroutine mas, aumentando el contador con Add(1) 
    go func(id int) { => crea una goroutine anonima (funcion anonima que se ejecuta en paralelo) pasando como parametro el id 
        defer wg.Done() => difiere la ejecuccion de wg.Done() hasta que termien la funcion 
        // Hacer algún trabajo => Codigo real de goroutine que estamos ejectuando
        // ...
    }(i) => ejectua la funcion anonima pasandole el id como argumento
}

// Esperar a que todas las goroutines completen
wg.Wait() => Esto se ejecuta despues del bucle hasta el que contador WaitGroup llegue a 0, es decir, que todas las goroutines hayan terminado su ejecuccion.

Para entender que pija son las gourtine, el shatCGT me tiro este ejemplo para romperle el culo a gopher: 

Vos sos el director (el main() de Go), y querés que 3 actores digan su diálogo al mismo tiempo, mientras vos esperás en el escenario.
Cada actor es una goroutine. Pero como sos un buen director, no te querés ir del escenario hasta que los 3 terminen su parte. ¿Cómo sabés cuándo terminan?

📌 ¡Necesitás un contador!

Cada vez que un actor sale a escena (goroutine), sumás 1 al contador.
Cuando termina de hablar, el actor resta 1.
Vos, el director, usás wg.Wait() para quedarte parado esperando a que el contador llegue a 0.

Aclaración: el main() es una funcion especial de go. Esta cuando termina, el programa se cierra completamente aunque hayan gourtines todavia trabajando.
Por eso hascemos el wg.Wait() para que el main() espere a que todas las goroutines terminen su trabajo antes de cerrar el programa. Basicamente hacemos 
esperar al main() hasta que todas las goroutines terminen su trabajo. 

------------

sync.Mutex

Se utiliza par lograr exclusión mutua y evitar condiciones de carrera en secciones criticas de codigo. Garantiza que solo una rutina pueda acceder a 
una sección critica a la vez. 
    - Sintaxis: 
        - Lock(): bloquea el mutex, evitando que otras goroutines accedan a la sección crítica.
        - Unlock(): desbloquea el mutex, permitiendo que otras goroutines accedan a la sección crítica.

Ejemplo: 

var mu sync.Mutex

// Sección crítica protegida por el mutex
mu.Lock()
// Acciones en la sección crítica
mu.Unlock()

-----------

Canales 

Se utilizan para comunicar y sincronizar rutinas. Permite acceso desde corrdinar y sincronizar secciones criticas de codigo hasta el envio y recepeción de
datos entre rutinas. 
    - Sintaxis: 
        - make(chan tipo): crea un canal de un tipo especifico
        - canal <- valor: envia un valor al canal
        - valor := <- canal: recibe un valor del canal

Ejemplo: 

ch := make(chan int)

go func() {
    // Hacer algún trabajo
    // ...
    ch <- 42 // Enviar datos al canal
}()

// Recibir datos del canal
valor := <-ch

----------------------------

CONCEPTOS ANTES DE LEER HTTP

Apuntes de: https://www.youtube.com/watch?v=l2MihYAj0Iw

Arquitectura Cliente - Servidor
	- Cliente: realiza una peticion (request) al servidor y espera una respuesta. 
	- Servidor: recibe la peticion y responde (response) al cliente.

URL: Las http estan dentro de una url. Significa Localizador de Recursos Uniforme. Es la dirección especifica 
que se le asgina a cada uno de los recursos disponibles en una red con la finalidad de que estos puedan ser
localizados o identificados. Cada recurso (pagina,imagen,documento, etc) tiene una URL unica. 

El servidor recibe esa request, la procesa y devuelve una response.

http://www.google.com.ar/hola 

http : PROTOCOLO
www : SUBDOMINIO
google : DOMINIO
com : EXTENSIÓN 
ar : GEOLOCALIZACION
hola : RUTA 

El protocolo HTTP: normas y reglas que nos sirven para estavlecer la comunicación entre el cliente y el servidor.
Permite que las solicitudes y respuestas entre clientes y servidores, tengan un determinado formato. 
El protocolo HTTP es un protocolo sin estado. Esto significa que cada peticion es independiente de la anterior.

El protocolo HTTP establece la forma que tiene que tener tanto una request como una response: 

Request => Estructura del paquete de peticion HTTP:
    - Metodo: GET, POST, PUT, DELETE, PATCH, OPTIONS, HEAD. De que tipo es. 
	- URL: dirección a la cual nos queremos comunicar. 
	- Headers: metadatos de la peticion (tipo de contenido, longitud del contenido, etc). Ej: tipo .json 
	- Body: el cuerpo de la peticion (opcional)

Response => Estructura de la respuesta HTTP: 
	- Status Codes: codigos que le permiten al cliente saber si la peticion fue exitosa o no (Ej: 404 Not Found) 
	- Headers 
	- Body: info si es necesaria

Metodos del request: 
- GET: obtener un recurso del servidor.
- POST: enviar una entidad a un recurso en especifico. 
- PUT: remplaza todas las representacioens actuales de recurso de destino con la carga util de la petición 
- DELETE: Borra un recurso especifico 
- PATCH: aplica modificaciones parciales a un recurso

Archivos .json: 
https://www.youtube.com/watch?v=RhxOTqFbI5Q
http://youtube.com/watch?v=wKJPiWQgbDU

Sintaxis: concepto clave - valor. 
{
	"nombre" : "Nahuel",
	"edad" : 3,
	"altura" : 1.77
}

Sintaxis en go:

type Movie struct {
	Title string `json:"title"`
	Year  int    `json:"year"`
	Color bool   `json:"color"`
	Actors []string `json:"actors"`
}

Hay que crear un struct con los mismos campos que el json. Las etiquetas json:"nombre" le dicen a Go cómo hacer coincidir los nombres con los del archivo
Para pasar de una estructura de go a un json, usamos la función json.Marshal(v interface{})([]byte, error) y para pasar de un json a una estructura de go, usamos la función json.Unmarshal(data []byte, v interface) error .

Ejemplo con el struct Movie:

func main() {
	var movies = []Movie

	data, err := json.Marshal(movies)
	if err != nil {
		log.Fatal("Error al convertir a JSON:", err.Error())
	}

	fmt.Println("%s", data)
}

Ejemplo 2:

func main() {
	var data =[]byte(...)

	var movie []Movie

	err := json.Unmarshal(data, &movie)
	if err != nil {
		log.Fatal("Error al convertir de struct", err.Error())
	}
}

API'S

Interfaz: capa de absrtaccion que permite la comunicación entre dos sistemas.
API: Interfaz de Programación de Aplicaciones. Es...
	- Es un conjunto de reglas y protocolos que permiten la comunicación entre diferentes sistemas.
	- Es un conjunto de URLS para comunicarse con una app. 
	- Un formato especifico de datos que se intercambian. 
	- Un conjunto de funciones que podes usar desde un modulo a otro para pedirle que haga algo.

Ejemplo: I/O le quiere pasar un nombre al kernel.
La api del kernel puede tener una ruta como esta:

POST http://localhost:8080/procesar-nombre

---------------------

HTTP Resumen de SSOO

Alternativas para el pasaje de información:
	1) query path: agregar la información en la ruta implicitamente 
	2) query param: agregar la información en la ruta explicitamente
	3) body: pasaje de información en un formato definido entre cliente-servidor

El parametro body solo se encuentra disponible para los verbos PUT, POST Y PATCH 

Para poder usarlo en go, usamos la biblioteca net/http
Server-Side:

func main(){

	http.HandleFunc("GET /helloWorld", helloWorld)
	http.ListenAndServe(":8080", nil)
}

func HelloWorld(w http.ResponseWriter, r *http.Request) {

	respuesta, err := json.Marshal("Hola! Como andas?")
	if err != nil {
		http.Error(w, "Error al codificar los datos como JSON", http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write(respuesta)
}
En este caso, el endpoint lo tenemos en GET /hellowordl. El puerto estara en el 8080
Esto inicializa y levanta la aplicación. 

A traves de w http.ResponseWriter, le mandamos la respuesta al cliente.
r *http.Request, es la peticion que nos llega del cliente. Desde ahi se puede leer el body, los parametros de la url, headers,
metodos, etc. 												

----------------------

Con body

Consideraciones:
	- Utilizamos POST ya que GET no se puede 
	- Utilizaremos la aplicación Postman que nos permite ejectuar distintos verbos

type BodyRequest struct {
	Name string `json:"name"`
}

func main() {
	http.HandleFunc("POST /helloworld", HelloWorld)
	http.ListenAndServe(":8080", nil)
}

func HelloWorld(w http.ResponseWriter, r *http.Request) {
	var request BodyRequest
	err := json.NewDecoder(r.Body).Decode(&request)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	respuesta, err := json.Marshal(fmt.Sprintf("Hola %s! Como andas?", request.Name))
	if err != nil {
		http.Error(w, "Error al codificar los datos como JSON", http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write(respuesta)
}

Observaciones:
	- Declaramos el struct body que recibimos como request 
	- Usamos la funcion json.NewDecoder(r.body).Decode(&request) para decodificar el body y pasarlo a un struct.

EL HANDLER

http:puertodeCpU/PIERTODECPU 
